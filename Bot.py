import telebot
import requests
import re
from telebot.types import InlineQueryResultArticle, InputTextMessageContent, InlineKeyboardMarkup, InlineKeyboardButton
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = '7147872197:AAFvz-_Q4sZ14npKR3_sgUQgYxYPUH81Hkk'
GEMINI_API_KEY = 'AIzaSyAj3Hn-iYmU3fi_vhMmar5iayJGPEK9sxg'

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
chat_histories = defaultdict(list)  # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
chat_models = defaultdict(lambda: "gemini-2.0-flash")  # –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
MODELS = ["gemini-2.0-flash", "gemini-1.5-pro", "gemini-1.0"]  # –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(API_TOKEN)

WELCOME_MESSAGE = "ü§ñ *–ü—Ä–∏–≤–µ—Ç! –Ø AI-–±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Gemini* üöÄ"

def get_gemini_url(model: str) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini API"""
    return f"https://generativelanguage.googleapis.com/v1beta/models/{model}:generateContent?key={GEMINI_API_KEY}"

def generate_gemini_response(contents: list, model: str) -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Gemini API —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏"""
    try:
        response = requests.post(
            get_gemini_url(model),
            json={"contents": contents},
            headers={'Content-Type': 'application/json'},
            timeout=10
        )
        
        if response.status_code != 200:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API ({response.status_code}): {response.text}"
            
        data = response.json()
        return data['candidates'][0]['content']['parts'][0]['text']
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def format_response(text: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Markdown –≤ HTML –¥–ª—è Telegram"""
    text = re.sub(r'```(.*?)```', r'<pre>\1</pre>', text, flags=re.DOTALL)
    text = re.sub(r'`(.*?)`', r'<code>\1</code>', text)
    text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
    return text

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history"),
        InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data="switch_model")
    )
    return keyboard

def get_model_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    buttons = [InlineKeyboardButton(model, callback_data=f"model_{model}") for model in MODELS]
    keyboard.add(*buttons)
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda msg: True)
def handle_message(message):
    chat_id = message.chat.id
    user_message = message.text
    current_model = chat_models[chat_id]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    chat_histories[chat_id].append({"role": "user", "parts": [{"text": user_message}]})
    if len(chat_histories[chat_id]) > 10:
        chat_histories[chat_id] = chat_histories[chat_id][-10:]
    
    bot.send_chat_action(chat_id, 'typing')
    response = generate_gemini_response(chat_histories[chat_id], current_model)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    chat_histories[chat_id].append({"role": "model", "parts": [{"text": response}]})
    
    formatted_response = format_response(response)
    if len(formatted_response) > 4096:
        formatted_response = formatted_response[:4090] + "..."
    
    bot.send_message(
        chat_id,
        formatted_response,
        parse_mode='HTML',
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.inline_handler(lambda query: True)
def handle_inline(inline_query):
    try:
        response = generate_gemini_response(
            [{"role": "user", "parts": [{"text": inline_query.query}]}],
            "gemini-2.0-flash"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤
        )
        
        formatted_response = format_response(response)
        result = InlineQueryResultArticle(
            id='1',
            title="–û—Ç–≤–µ—Ç –æ—Ç Gemini",
            description=response[:100] + "..." if len(response) > 100 else response,
            input_message_content=InputTextMessageContent(formatted_response, parse_mode='HTML')
        )
        
        bot.answer_inline_query(inline_query.id, [result], cache_time=10)
    except Exception as e:
        bot.answer_inline_query(
            inline_query.id,
            [InlineQueryResultArticle(
                id='error',
                title="–û—à–∏–±–∫–∞",
                input_message_content=InputTextMessageContent(f"‚ö†Ô∏è {str(e)}")
            )]
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_callbacks(call):
    chat_id = call.message.chat.id
    
    # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    if call.data == "clear_history":
        chat_histories[chat_id].clear()
        bot.answer_callback_query(call.id, "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
        bot.send_message(chat_id, "‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞", reply_markup=get_main_keyboard())
    
    # –°–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏
    elif call.data == "switch_model":
        bot.answer_callback_query(call.id)
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏:",
            reply_markup=get_model_keyboard()
        )
    
    # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
    elif call.data.startswith("model_"):
        new_model = call.data.split("_")[1]
        if new_model in MODELS:
            chat_models[chat_id] = new_model
            bot.answer_callback_query(call.id, f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_model}")
            bot.send_message(
                chat_id,
                f"‚úÖ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {new_model}",
                reply_markup=get_main_keyboard()
            )
        else:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏")

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        WELCOME_MESSAGE,
        parse_mode='MARKDOWN',
        reply_markup=get_main_keyboard()
    )

if __name__ == '__main__':
    bot.polling(none_stop=True)
